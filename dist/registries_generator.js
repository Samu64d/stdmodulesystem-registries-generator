/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./scripts/Main.ts":
/*!*************************!*\
  !*** ./scripts/Main.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Main: () => (/* binding */ Main)\n/* harmony export */ });\n/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config/config */ \"./scripts/config/config.ts\");\n/* harmony import */ var _config_const__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config/const */ \"./scripts/config/const.ts\");\n/* harmony import */ var _utils_MathUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/MathUtils */ \"./scripts/utils/MathUtils.ts\");\n/* harmony import */ var _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/ConsoleManager */ \"./scripts/utils/ConsoleManager.ts\");\n/* harmony import */ var _reports_ReportsProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reports/ReportsProvider */ \"./scripts/reports/ReportsProvider.ts\");\n/* harmony import */ var _datapack_DatapackManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./datapack/DatapackManager */ \"./scripts/datapack/DatapackManager.ts\");\n/* harmony import */ var _registries_RegistryProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./registries/RegistryProvider */ \"./scripts/registries/RegistryProvider.ts\");\n/* harmony import */ var _registries_RegistryConfigurationProvider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./registries/RegistryConfigurationProvider */ \"./scripts/registries/RegistryConfigurationProvider.ts\");\n//\n// Main.ts\n//\n// STD Module System registries generator\n// Version 1.0.0 (Protocol version 1.0.0)\n\n\n\n\n\n\n\n\nclass Main {\n    reports;\n    inDatapack;\n    registries;\n    outDatapack;\n    constructor() {\n        this.reports = new _reports_ReportsProvider__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n        this.inDatapack = new _datapack_DatapackManager__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\n        this.registries = new _registries_RegistryProvider__WEBPACK_IMPORTED_MODULE_6__[\"default\"](this.reports, this.inDatapack);\n        this.outDatapack = new _datapack_DatapackManager__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\n    }\n    /**\n     * Main\n     */\n    static main() {\n        let main = new Main();\n        main.run();\n    }\n    /**\n     * Run\n     */\n    run() {\n        _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_3__[\"default\"].log(\"\\nSTD Module System registry generator\\nVersion: 1.0.0 (Protocol version 1.0.0)\\n\", _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_3__.ConsoleColors.YELLOW);\n        // Load reports\n        _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_3__[\"default\"].log(\"Loading provided Minecraft reports\");\n        this.reports.load(_config_config__WEBPACK_IMPORTED_MODULE_0__.IN_REPORTS_PATH);\n        // Load datapacks\n        _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_3__[\"default\"].log(\"Loading provided datapacks\");\n        this.inDatapack.multiload(_config_config__WEBPACK_IMPORTED_MODULE_0__.IN_DATAPACKS_PATH);\n        // Load registries\n        _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_3__[\"default\"].log(\"Loading registries configuration and registries data\");\n        this.registries.load(_config_config__WEBPACK_IMPORTED_MODULE_0__.IN_REGISTRIES_PATH, _config_config__WEBPACK_IMPORTED_MODULE_0__.IN_SCHEMAS_PATH);\n        _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_3__[\"default\"].log(\"Registries protocol version number: \" + _config_const__WEBPACK_IMPORTED_MODULE_1__.PROTOCOL_VERSION);\n        _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_3__[\"default\"].log(\"Registries data version number: \" + this.registries.getConfig().getDataVersion());\n        // Generate datapack\n        _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_3__[\"default\"].log(\"Starting registries generation process\");\n        this.generateTags();\n        this.generateFunctions();\n        // Save datapack\n        _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_3__[\"default\"].log(\"Attempting to saving data on out folder\");\n        this.outDatapack.save(_config_config__WEBPACK_IMPORTED_MODULE_0__.OUT_DATAPACK_PATH);\n        // End\n        _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_3__[\"default\"].log(\"Process successfully completed! Registries saved in \" + _config_config__WEBPACK_IMPORTED_MODULE_0__.OUT_DATAPACK_PATH);\n        return;\n    }\n    /**\n     * Generate functions\n     */\n    generateFunctions() {\n        // Generate payload function\n        let functionName = _config_config__WEBPACK_IMPORTED_MODULE_0__.OUT_DATAPACK_NAMESPACE + \":cache/set_static\";\n        let functionContents = \"\";\n        functionContents = \"data modify storage minecraft_registries:static PROTOCOL_VERSION set value \" + _config_const__WEBPACK_IMPORTED_MODULE_1__.PROTOCOL_VERSION + \"\\n\";\n        functionContents += \"data modify storage minecraft_registries:static DATA_VERSION set value \" + this.registries.getConfig().getDataVersion() + \"\\n\";\n        this.registries.forEach((registryName) => {\n            // Name\n            let stringObject = \"{\";\n            let init = true;\n            this.registries.forEachElement(registryName, (elementName) => {\n                let registryElement = this.registries.getElement(registryName, elementName);\n                let elementId = _utils_MathUtils__WEBPACK_IMPORTED_MODULE_2__[\"default\"].parseNumeric(registryElement[\"id\"]);\n                stringObject += (init ? \"\" : \", \") + elementId + \":\\\"\" + elementName + \"\\\"\";\n                init = false;\n            });\n            stringObject += \"}\";\n            functionContents += \"data modify storage minecraft_registries:static DATA.\" + registryName.toUpperCase() + \"_NAME set value \" + stringObject + \"\\n\";\n            // Props\n            let registriesConfig = this.registries.getConfig();\n            registriesConfig.forEachProp(registryName, (propName) => {\n                if (propName == \"id\")\n                    return;\n                let propType = this.registries.getConfig().getPropType(registryName, propName);\n                let stringObject = \"{\";\n                let init = true;\n                this.registries.forEachElement(registryName, (elementName) => {\n                    let registryElement = this.registries.getElement(registryName, elementName);\n                    let propValue = registryElement[propName];\n                    let parsedPropValue = \"\";\n                    if (propType == \"real\") {\n                        parsedPropValue = (_utils_MathUtils__WEBPACK_IMPORTED_MODULE_2__[\"default\"].isInteger(propValue) ? propValue.toFixed(1) : propValue) + \"d\";\n                    }\n                    else {\n                        parsedPropValue = propValue.toString();\n                    }\n                    stringObject += (init ? \"\" : \", \") + \"\\\"\" + elementName + \"\\\":\" + parsedPropValue;\n                    init = false;\n                });\n                stringObject += \"}\";\n                functionContents += \"data modify storage minecraft_registries:static DATA.\" + registryName.toUpperCase() + \"_\" + propName.toUpperCase() + \" set value \" + stringObject + \"\\n\";\n            });\n            _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_3__[\"default\"].log(\"Generated function variables for registry \\\"\" + registryName + \"\\\"\");\n        });\n        // Blockstates\n        let stringObject = \"{\";\n        let init = true;\n        let blockstates = this.reports.getBlockstates();\n        blockstates.forEachBlockProperty((value, propertyList) => {\n            stringObject += (init ? \"\" : \", \") + \"\\\"\" + value + \"\\\":[\";\n            let init2 = true;\n            for (let property of propertyList) {\n                stringObject += (init2 ? \"\" : \", \") + \"\\\"\" + property + \"\\\"\";\n                init2 = false;\n            }\n            stringObject += \"]\";\n            init = false;\n        });\n        stringObject += \"}\";\n        functionContents += \"data modify storage minecraft_registries:static DATA.BLOCKSTATES set value \" + stringObject + \"\\n\";\n        this.outDatapack.createFunction(functionName, functionContents);\n        // Blocktstates getter functions\n        blockstates.forEachProperty((propertyName) => {\n            // Get property value list\n            let valueList = blockstates.getPropertyValues(propertyName);\n            let functionContents = \"\";\n            for (let value of valueList) {\n                functionContents += \"execute if block ~ ~ ~ #minecraft_registries:all[\" + propertyName + \"=\" + value + \"] run data modify storage io: property set value \\\"\" + value + \"\\\"\\n\";\n            }\n            let functionName = _config_config__WEBPACK_IMPORTED_MODULE_0__.OUT_DATAPACK_NAMESPACE + \":providers/blockstates/get_\" + propertyName;\n            this.outDatapack.createFunction(functionName, functionContents);\n        });\n        _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_3__[\"default\"].log(\"Generated blockstate functions\");\n    }\n    /**\n     * Generate tags\n     */\n    generateTags() {\n        this.registries.forEach((registryName) => {\n            this.registries.getConfig().forEachProp(registryName, (propName) => {\n                if (propName != \"id\")\n                    return;\n                let tagValues = new Array();\n                let propSize = this.registries.getConfig().getPropSize(registryName, propName);\n                let propSign = this.registries.getConfig().getPropSign(registryName, propName);\n                for (let bit = 0; bit < propSize; bit++)\n                    tagValues.push(new Array());\n                // Check bits for each element \n                this.registries.forEachElement(registryName, (elementName) => {\n                    let registryElement = this.registries.getElement(registryName, elementName);\n                    let propValue = _registries_RegistryConfigurationProvider__WEBPACK_IMPORTED_MODULE_7__[\"default\"].denormalizePropValue(registryElement[propName], propSize, propSign);\n                    for (let bit = 0; bit < propSize; bit++) {\n                        if (_utils_MathUtils__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getBit(propValue, bit)) {\n                            tagValues[bit].push(elementName);\n                        }\n                    }\n                });\n                // Save tags\n                let elementTagType = this.registries.getConfig().getElementTagType(registryName);\n                for (let bit = 0; bit < propSize; bit++) {\n                    let tagName = _config_config__WEBPACK_IMPORTED_MODULE_0__.OUT_DATAPACK_NAMESPACE + \":\" + \"/property/\" + propName + \"/bit_\" + (bit + 1);\n                    this.outDatapack.createTag(elementTagType, tagName, tagValues[bit]);\n                }\n            });\n            _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_3__[\"default\"].log(\"Generated tags for registry \\\"\" + registryName + \"\\\"\");\n        });\n    }\n}\nMain.main();\n\n\n//# sourceURL=webpack://stdmodulesystem.registries_generator/./scripts/Main.ts?");

/***/ }),

/***/ "./scripts/config/config.ts":
/*!**********************************!*\
  !*** ./scripts/config/config.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEBUG: () => (/* binding */ DEBUG),\n/* harmony export */   IN_DATAPACKS_PATH: () => (/* binding */ IN_DATAPACKS_PATH),\n/* harmony export */   IN_REGISTRIES_PATH: () => (/* binding */ IN_REGISTRIES_PATH),\n/* harmony export */   IN_REPORTS_PATH: () => (/* binding */ IN_REPORTS_PATH),\n/* harmony export */   IN_SCHEMAS_PATH: () => (/* binding */ IN_SCHEMAS_PATH),\n/* harmony export */   OUT_DATAPACK_NAMESPACE: () => (/* binding */ OUT_DATAPACK_NAMESPACE),\n/* harmony export */   OUT_DATAPACK_PATH: () => (/* binding */ OUT_DATAPACK_PATH)\n/* harmony export */ });\n//\n// config.ts\n//\n// Paths\nconst IN_SCHEMAS_PATH = \"./schemas\";\nconst IN_REGISTRIES_PATH = \"./registries\";\nconst IN_DATAPACKS_PATH = \"./datapacks\";\nconst IN_REPORTS_PATH = \"./reports\";\nconst OUT_DATAPACK_PATH = \"./out\";\nconst OUT_DATAPACK_NAMESPACE = \"minecraft_registries\";\n// Debug\nconst DEBUG = true;\n\n\n//# sourceURL=webpack://stdmodulesystem.registries_generator/./scripts/config/config.ts?");

/***/ }),

/***/ "./scripts/config/const.ts":
/*!*********************************!*\
  !*** ./scripts/config/const.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PROTOCOL_VERSION: () => (/* binding */ PROTOCOL_VERSION)\n/* harmony export */ });\n//\n// const.ts\n//\n// Protocol version\nconst PROTOCOL_VERSION = 100;\n\n\n//# sourceURL=webpack://stdmodulesystem.registries_generator/./scripts/config/const.ts?");

/***/ }),

/***/ "./scripts/datapack/DatapackGenerator.ts":
/*!***********************************************!*\
  !*** ./scripts/datapack/DatapackGenerator.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DatapackGenerator)\n/* harmony export */ });\n/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/config */ \"./scripts/config/config.ts\");\n/* harmony import */ var _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/FsUtils */ \"./scripts/utils/FsUtils.ts\");\n/* harmony import */ var _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/ConsoleManager */ \"./scripts/utils/ConsoleManager.ts\");\n/* harmony import */ var _commons__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commons */ \"./scripts/datapack/commons.ts\");\n/* harmony import */ var _DatapackResourceLocation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DatapackResourceLocation */ \"./scripts/datapack/DatapackResourceLocation.ts\");\n//\n// DatapackGenerator.ts\n//\n\n\n\n\n\nclass DatapackGenerator {\n    // Datapack\n    datapack;\n    // Datapack root path\n    rootPathName;\n    /**\n     * Generate a datapack\n     */\n    constructor(datapack, rootPathName) {\n        this.datapack = datapack;\n        this.rootPathName = rootPathName;\n    }\n    /**\n     * Generate the datapack data\n     */\n    generate() {\n        // Functions\n        this.generateFunctions();\n        // Tags\n        this.generateTagGroups();\n    }\n    /**\n     * Generate all functions\n     */\n    generateFunctions() {\n        this.datapack.forEachFunction((functionName) => {\n            this.generateFunction(functionName);\n        });\n    }\n    /**\n    * Generate a function\n    */\n    generateFunction(functionName) {\n        // Create text data\n        let functionTextHead = \"#\\n# \" + functionName + \"\\n#\\n\\n# These commands are auto generated. Do not modify\\n\";\n        let functionText = functionTextHead + this.datapack.getFunctionContents(functionName);\n        // Creat path\n        let functionPath = _DatapackResourceLocation__WEBPACK_IMPORTED_MODULE_4__[\"default\"].fromResourceURI(functionName, _commons__WEBPACK_IMPORTED_MODULE_3__.ResourceTypes.FUNCTIONS).getResourcePath();\n        functionPath = _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].joinPath(this.rootPathName, functionPath);\n        // Write on file\n        _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].writeTextFile(functionPath, functionText);\n        if (_config_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG)\n            _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].log(functionPath, _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_2__.ConsoleColors.GREEN);\n    }\n    /**\n    * Generate all tag groups\n    */\n    generateTagGroups() {\n        this.datapack.forEachTagGroup((tagType) => {\n            this.generateTagGroup(tagType);\n        });\n    }\n    /**\n     * Generate a tag group\n     */\n    generateTagGroup(tagType) {\n        this.datapack.forEachTag(tagType, (tagName) => {\n            this.generateTag(tagType, tagName);\n        });\n    }\n    /**\n    * Generate a tag\n    */\n    generateTag(tagType, tagName) {\n        // Create json object\n        let tagObject = {\n            replace: false,\n            values: this.datapack.getTagElements(tagType, tagName)\n        };\n        // Create path\n        let tagPath = _DatapackResourceLocation__WEBPACK_IMPORTED_MODULE_4__[\"default\"].fromResourceURI(tagName, _commons__WEBPACK_IMPORTED_MODULE_3__.ResourceTypes.TAGS, tagType).getResourcePath();\n        tagPath = _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].joinPath(this.rootPathName, tagPath);\n        // Write on file\n        _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].writeJSONFile(tagPath, tagObject);\n        if (_config_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG)\n            _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].log(tagPath, _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_2__.ConsoleColors.GREEN);\n    }\n}\n\n\n//# sourceURL=webpack://stdmodulesystem.registries_generator/./scripts/datapack/DatapackGenerator.ts?");

/***/ }),

/***/ "./scripts/datapack/DatapackLoader.ts":
/*!********************************************!*\
  !*** ./scripts/datapack/DatapackLoader.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DatapackLoader)\n/* harmony export */ });\n/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/config */ \"./scripts/config/config.ts\");\n/* harmony import */ var _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/FsUtils */ \"./scripts/utils/FsUtils.ts\");\n/* harmony import */ var _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/ConsoleManager */ \"./scripts/utils/ConsoleManager.ts\");\n/* harmony import */ var _commons__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commons */ \"./scripts/datapack/commons.ts\");\n/* harmony import */ var _DatapackResourceLocation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DatapackResourceLocation */ \"./scripts/datapack/DatapackResourceLocation.ts\");\n//\n// DatapackLoader.ts\n//\n\n\n\n\n\nclass DatapackLoader {\n    // Datapack\n    datapack;\n    // Datapack root path\n    rootPathName;\n    // Datapack namespace folder\n    namespacesPathName;\n    /**\n     * Load a datapack\n     */\n    constructor(datapack, rootPathName) {\n        this.datapack = datapack;\n        this.rootPathName = rootPathName;\n        this.namespacesPathName = rootPathName + \"/data\";\n    }\n    /**\n     * Load the datapack data\n     */\n    load() {\n        let namespaceNames = _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getFolderElements(this.namespacesPathName);\n        for (let namespaceName of namespaceNames) {\n            let dataPath = this.namespacesPathName + \"/\" + namespaceName;\n            this.loadDataFromNamespaceFolder(dataPath);\n        }\n    }\n    /**\n     * Load data from a namespace folder\n     */\n    loadDataFromNamespaceFolder(dataPath) {\n        // Functions\n        let functionsPath = dataPath + \"/\" + _commons__WEBPACK_IMPORTED_MODULE_3__.ResourceTypeToFolderName.get(_commons__WEBPACK_IMPORTED_MODULE_3__.ResourceTypes.FUNCTIONS);\n        this.loadFunctionsFromFolder(functionsPath);\n        // Tag groups\n        let tagGroupsPath = dataPath + \"/\" + _commons__WEBPACK_IMPORTED_MODULE_3__.ResourceTypeToFolderName.get(_commons__WEBPACK_IMPORTED_MODULE_3__.ResourceTypes.TAGS);\n        this.loadTagGroupsFromFolder(tagGroupsPath);\n    }\n    /**\n     * Load all functions from a folder\n     */\n    loadFunctionsFromFolder(functionsPath) {\n        if (_utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].folderExists(functionsPath)) {\n            _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].scanFolder(functionsPath, this.loadFunction.bind(this));\n        }\n    }\n    /**\n     * Load a function\n     */\n    loadFunction(functionPath) {\n        let functionText = _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].readTextFile(functionPath);\n        let functionUri = _DatapackResourceLocation__WEBPACK_IMPORTED_MODULE_4__[\"default\"].fromResourcePath(functionPath, this.namespacesPathName);\n        this.datapack.createFunction(functionUri.getResourceURI(), functionText);\n        if (_config_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG)\n            _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].log(functionPath, _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_2__.ConsoleColors.GREEN);\n        return;\n    }\n    /**\n     * Load all tag groups from a folder\n     */\n    loadTagGroupsFromFolder(tagGroupsPath) {\n        for (let tagTypeId in _commons__WEBPACK_IMPORTED_MODULE_3__.TagTypes) {\n            let tagTypeFolder = _commons__WEBPACK_IMPORTED_MODULE_3__.TagTypeToFolderName.get(_commons__WEBPACK_IMPORTED_MODULE_3__.TagTypes[tagTypeId]);\n            let tagGroupPath = tagGroupsPath + \"/\" + tagTypeFolder;\n            if (_utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].folderExists(tagGroupPath)) {\n                this.loadTagGroupFromFolder(tagGroupPath);\n            }\n        }\n    }\n    /**\n     * Load a tag group from a folder\n     */\n    loadTagGroupFromFolder(tagGroupPath) {\n        _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].scanFolder(tagGroupPath, this.loadTagFromFile.bind(this));\n    }\n    /**\n     * Load a tag from a file\n     */\n    loadTagFromFile(tagPath) {\n        let tagObject = _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].readJSONFile(tagPath);\n        let tagUri = _DatapackResourceLocation__WEBPACK_IMPORTED_MODULE_4__[\"default\"].fromResourcePath(tagPath, this.namespacesPathName);\n        this.datapack.updateTag(tagUri.getTagType(), tagUri.getResourceURI(), tagObject.values, tagObject.replace);\n        if (_config_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG)\n            _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].log(tagPath, _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_2__.ConsoleColors.GREEN);\n    }\n}\n\n\n//# sourceURL=webpack://stdmodulesystem.registries_generator/./scripts/datapack/DatapackLoader.ts?");

/***/ }),

/***/ "./scripts/datapack/DatapackManager.ts":
/*!*********************************************!*\
  !*** ./scripts/datapack/DatapackManager.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DatapackManager)\n/* harmony export */ });\n/* harmony import */ var _DatapackLoader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DatapackLoader */ \"./scripts/datapack/DatapackLoader.ts\");\n/* harmony import */ var _DatapackGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DatapackGenerator */ \"./scripts/datapack/DatapackGenerator.ts\");\n/* harmony import */ var _MultiDatapackLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MultiDatapackLoader */ \"./scripts/datapack/MultiDatapackLoader.ts\");\n//\n// DatapackManager.ts\n//\n\n\n\nclass DatapackManager {\n    // Datapack name\n    name;\n    // Datapack data\n    data;\n    constructor(datapackName = \"datapack\") {\n        this.name = datapackName;\n        this.data = {\n            functions: new Map(),\n            tagGroups: new Map()\n        };\n    }\n    /**\n     * Load the datapack data from a single saved datapack\n     */\n    load(pathName) {\n        let loader = new _DatapackLoader__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this, pathName);\n        loader.load();\n    }\n    /**\n     * Load the datapack data from multiple saved datapacks\n     */\n    multiload(pathName) {\n        let loader = new _MultiDatapackLoader__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this, pathName);\n        loader.load();\n    }\n    /**\n     * Save the datapack data on the file system\n     */\n    save(pathName) {\n        let generator = new _DatapackGenerator__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this, pathName);\n        generator.generate();\n    }\n    /**\n     * Get datapack name\n     */\n    getName() {\n        return this.name;\n    }\n    /**\n     * Iterate over all functions\n     */\n    forEachFunction(callback) {\n        let functions = this.getFunctions();\n        functions.forEach((function_, functionName) => {\n            callback(functionName);\n        });\n    }\n    /**\n     * Get a function contents\n     */\n    getFunctionContents(functionName) {\n        let function_ = this.getFunction(functionName);\n        return function_.text;\n    }\n    /**\n     * Create a new function\n     */\n    createFunction(functionName, functionContents = \"\") {\n        let functions = this.getFunctions();\n        let function_ = {\n            text: functionContents\n        };\n        functions.set(functionName, function_);\n    }\n    /**\n     * Check if a function exists\n     */\n    existsFunction(functionName) {\n        let functions = this.getFunctions();\n        return functions.has(functionName);\n    }\n    /**\n     * Iterate over all tag groups\n     */\n    forEachTagGroup(callback) {\n        let tagGroups = this.getTagGroups();\n        tagGroups.forEach((tagGroup, tagType) => {\n            callback(tagType);\n        });\n    }\n    /**\n     * Check if a tag group exists\n     */\n    existsTagGroup(tagType) {\n        let tags = this.getTagGroups();\n        return tags.has(tagType);\n    }\n    /**\n     * Iterate over all tags\n     */\n    forEachTag(tagType, callback) {\n        if (!this.existsTagGroup(tagType))\n            return;\n        let tags = this.getTags(tagType);\n        tags.forEach((tag, tagName) => {\n            callback(tagName);\n        });\n    }\n    /**\n     * Get a list of tag elements\n     */\n    getTagElements(tagType, tagName) {\n        let tag = this.getTag(tagType, tagName);\n        return tag.values;\n    }\n    /**\n     * Get a list of unpacked tag elements\n     */\n    getUnpackedTagElements(tagType, tagName, visited = new Set()) {\n        let tag = this.getTag(tagType, tagName);\n        let packedTags = tag.values;\n        let unpackedTags = new Array();\n        visited.add(tagName);\n        for (let elementName of packedTags) {\n            if (elementName.startsWith(\"#\")) {\n                elementName = elementName.slice(1);\n                if (!visited.has(elementName)) {\n                    let tags = this.getUnpackedTagElements(tagType, elementName, visited);\n                    unpackedTags.push(...tags);\n                }\n                else\n                    throw new Error(\"Circular reference detected in tag \\\"\" + tagName + \"\\\"\");\n            }\n            else {\n                unpackedTags.push(elementName);\n            }\n        }\n        return unpackedTags;\n    }\n    /**\n     * Create a tag inside a tag group\n     */\n    createTag(tagType, tagName, values) {\n        if (!this.existsTagGroup(tagType))\n            this.createTagGroup(tagType);\n        let tag = {\n            values: values\n        };\n        let tags = this.getTags(tagType);\n        tags.set(tagName, tag);\n    }\n    /**\n     * Update a tag inside a tag group\n     */\n    updateTag(tagType, tagName, values, replace = false) {\n        if (!this.existsTag(tagType, tagName) || replace) {\n            this.createTag(tagType, tagName, values);\n        }\n        else {\n            let oldValues = this.getTagElements(tagType, tagName);\n            let tag = {\n                values: DatapackManager.mergeTagValues(oldValues, values)\n            };\n            let tags = this.getTags(tagType);\n            tags.set(tagName, tag);\n        }\n    }\n    /**\n     * Check if a tag exists inside a tag group\n     */\n    existsTag(tagType, tagName) {\n        return this.existsTagGroup(tagType) && this.getTags(tagType).has(tagName);\n    }\n    /**\n     * Get all functions\n     */\n    getFunctions() {\n        return this.data.functions;\n    }\n    /**\n     * Get a function\n     */\n    getFunction(functionName) {\n        let functions = this.getFunctions();\n        if (functions.has(functionName)) {\n            return functions.get(functionName);\n        }\n        else\n            throw new Error(\"Unknow function \\\"\" + functionName + \"\\\"\");\n    }\n    /**\n     * Get all tag groups\n     */\n    getTagGroups() {\n        return this.data.tagGroups;\n    }\n    /**\n     * Get a tag group\n     */\n    getTagGroup(tagType) {\n        let tagGroups = this.getTagGroups();\n        if (tagGroups.has(tagType)) {\n            return tagGroups.get(tagType);\n        }\n        else\n            throw new Error(\"Unknow tag group \\\"\" + tagType + \"\\\"\");\n    }\n    /**\n     * Create a tag group\n     */\n    createTagGroup(tagType) {\n        let tags = this.getTagGroups();\n        let tagGroup = {\n            tags: new Map()\n        };\n        tags.set(tagType, tagGroup);\n    }\n    /**\n     *  Get all tags from a tag group\n     */\n    getTags(tagType) {\n        let tagGroup = this.getTagGroup(tagType);\n        return tagGroup.tags;\n    }\n    /**\n     * Get a tag from a tag group\n     */\n    getTag(tagType, tagName) {\n        let tags = this.getTags(tagType);\n        if (tags.has(tagName)) {\n            return tags.get(tagName);\n        }\n        else\n            throw new Error(\"Unknow tag \\\"\" + tagName + \"\\\"\");\n    }\n    /**\n     * Merge two tag value arrays\n     */\n    static mergeTagValues(values0, values1) {\n        let mergedValues = [...values0];\n        for (let value of values1) {\n            if (!mergedValues.includes(value))\n                mergedValues.push(value);\n        }\n        return mergedValues;\n    }\n}\n\n\n//# sourceURL=webpack://stdmodulesystem.registries_generator/./scripts/datapack/DatapackManager.ts?");

/***/ }),

/***/ "./scripts/datapack/DatapackResourceLocation.ts":
/*!******************************************************!*\
  !*** ./scripts/datapack/DatapackResourceLocation.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DatapackResourceLocation)\n/* harmony export */ });\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/FsUtils */ \"./scripts/utils/FsUtils.ts\");\n/* harmony import */ var _commons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commons */ \"./scripts/datapack/commons.ts\");\n//\n// DatapackResourceLocation.ts\n//\n\n\n\nclass DatapackResourceLocation {\n    // Resource namespace\n    namespaceName;\n    // Resource type\n    resourceType;\n    // Tag type\n    tagType;\n    // Resource name\n    resourceName;\n    constructor(namespaceName, resourceType, resourceName, tagType) {\n        this.namespaceName = namespaceName;\n        this.resourceType = resourceType;\n        this.resourceName = resourceName;\n        if (tagType !== undefined)\n            this.tagType = tagType;\n    }\n    /**\n     * Create a resource location from a resource path relative to the root folder of the datapack\n     */\n    static fromResourcePath(resourcePath, rootPath) {\n        // Get the relative path inside the datapack root folder\n        if (rootPath != undefined)\n            resourcePath = path__WEBPACK_IMPORTED_MODULE_0__.relative(rootPath, resourcePath);\n        // Parse nodes\n        let pathNodes = _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].splitPath(resourcePath);\n        let namespaceName = pathNodes[0];\n        let resourceType = _commons__WEBPACK_IMPORTED_MODULE_2__.FolderNameToResourceType.get(pathNodes[1]);\n        let isTagResource = resourceType === _commons__WEBPACK_IMPORTED_MODULE_2__.ResourceTypes.TAGS;\n        let tagType = isTagResource ? _commons__WEBPACK_IMPORTED_MODULE_2__.FolderNameToTagType.get(pathNodes[2]) : undefined;\n        let resourceName = _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].removeExtension(path__WEBPACK_IMPORTED_MODULE_0__.join(...pathNodes.slice(isTagResource ? 3 : 2))).replaceAll(\"\\\\\", \"/\");\n        // Create\n        return new DatapackResourceLocation(namespaceName, resourceType, resourceName, tagType);\n    }\n    /**\n     * Create a resource location from a resource uri\n     */\n    static fromResourceURI(resourceURI, resourceType, tagType) {\n        // Parse uri\n        let uriNodes = resourceURI.split(\":\");\n        let namespaceName = uriNodes[0];\n        let resourceName = uriNodes[1];\n        // Create\n        return new DatapackResourceLocation(namespaceName, resourceType, resourceName, tagType);\n    }\n    /**\n     * Get the resource file path from the root of the datapack\n     */\n    getResourcePath() {\n        let resourceTypeExtension = _commons__WEBPACK_IMPORTED_MODULE_2__.ResourceTypeToExtensions.get(this.resourceType);\n        let resourceTypeFolder = _commons__WEBPACK_IMPORTED_MODULE_2__.ResourceTypeToFolderName.get(this.resourceType);\n        resourceTypeFolder = this.isTagResource() ? resourceTypeFolder + \"/\" + _commons__WEBPACK_IMPORTED_MODULE_2__.TagTypeToFolderName.get(this.tagType) : resourceTypeFolder;\n        return \"./\" + this.namespaceName + \"/\" + resourceTypeFolder + \"/\" + this.resourceName + \".\" + resourceTypeExtension;\n    }\n    /**\n     * Get the namespace name\n     */\n    getNamespaceName() {\n        return this.namespaceName;\n    }\n    /**\n     * Get the resource type\n     */\n    getResourceType() {\n        return this.resourceType;\n    }\n    /**\n     * Check if represent a tag resource type\n     */\n    isTagResource() {\n        return this.resourceType === _commons__WEBPACK_IMPORTED_MODULE_2__.ResourceTypes.TAGS;\n    }\n    /**\n     * Get tag type\n     */\n    getTagType() {\n        return this.tagType;\n    }\n    /**\n     * Get the resource name\n     */\n    getResourceName() {\n        return this.resourceName;\n    }\n    /**\n     * Get the resource uri\n     */\n    getResourceURI() {\n        return this.namespaceName + \":\" + this.resourceName;\n    }\n}\n\n\n//# sourceURL=webpack://stdmodulesystem.registries_generator/./scripts/datapack/DatapackResourceLocation.ts?");

/***/ }),

/***/ "./scripts/datapack/MultiDatapackLoader.ts":
/*!*************************************************!*\
  !*** ./scripts/datapack/MultiDatapackLoader.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MultiDatapackLoader)\n/* harmony export */ });\n/* harmony import */ var _utils_FsUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/FsUtils */ \"./scripts/utils/FsUtils.ts\");\n/* harmony import */ var _DatapackLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DatapackLoader */ \"./scripts/datapack/DatapackLoader.ts\");\n//\n// MultiDatapackLoader.ts\n//\n\n\nclass MultiDatapackLoader {\n    // Datapack\n    datapack;\n    // Datapacks root path\n    rootPathName;\n    /**\n     * Load a datapack\n     */\n    constructor(datapack, rootPathName) {\n        this.datapack = datapack;\n        this.rootPathName = rootPathName;\n    }\n    /**\n     * Load the datapack data\n     */\n    load() {\n        let datapacksFolders = _utils_FsUtils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getFolderElements(this.rootPathName);\n        for (let datapackFolder of datapacksFolders) {\n            let datapackPath = this.rootPathName + \"/\" + datapackFolder;\n            let loader = new _DatapackLoader__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.datapack, datapackPath);\n            loader.load();\n        }\n    }\n}\n\n\n//# sourceURL=webpack://stdmodulesystem.registries_generator/./scripts/datapack/MultiDatapackLoader.ts?");

/***/ }),

/***/ "./scripts/datapack/commons.ts":
/*!*************************************!*\
  !*** ./scripts/datapack/commons.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FolderNameToResourceType: () => (/* binding */ FolderNameToResourceType),\n/* harmony export */   FolderNameToTagType: () => (/* binding */ FolderNameToTagType),\n/* harmony export */   ResourceTypeToExtensions: () => (/* binding */ ResourceTypeToExtensions),\n/* harmony export */   ResourceTypeToFolderName: () => (/* binding */ ResourceTypeToFolderName),\n/* harmony export */   ResourceTypes: () => (/* binding */ ResourceTypes),\n/* harmony export */   TagTypeToFolderName: () => (/* binding */ TagTypeToFolderName),\n/* harmony export */   TagTypes: () => (/* binding */ TagTypes)\n/* harmony export */ });\n//\n// commons.ts\n//\nvar ResourceTypes;\n(function (ResourceTypes) {\n    ResourceTypes[ResourceTypes[\"FUNCTIONS\"] = 0] = \"FUNCTIONS\";\n    ResourceTypes[ResourceTypes[\"TAGS\"] = 1] = \"TAGS\";\n})(ResourceTypes || (ResourceTypes = {}));\nvar TagTypes;\n(function (TagTypes) {\n    TagTypes[TagTypes[\"BLOCK\"] = 0] = \"BLOCK\";\n    TagTypes[TagTypes[\"FLUID\"] = 1] = \"FLUID\";\n    TagTypes[TagTypes[\"ITEM\"] = 2] = \"ITEM\";\n    TagTypes[TagTypes[\"ENTITY_TYPE\"] = 3] = \"ENTITY_TYPE\";\n    TagTypes[TagTypes[\"BIOME\"] = 4] = \"BIOME\";\n})(TagTypes || (TagTypes = {}));\nconst ResourceTypeToFolderName = new Map([\n    [ResourceTypes.FUNCTIONS, \"function\"],\n    [ResourceTypes.TAGS, \"tags\"]\n]);\nconst FolderNameToResourceType = new Map([\n    [\"function\", ResourceTypes.FUNCTIONS],\n    [\"tags\", ResourceTypes.TAGS]\n]);\nconst ResourceTypeToExtensions = new Map([\n    [ResourceTypes.FUNCTIONS, \"mcfunction\"],\n    [ResourceTypes.TAGS, \"json\"]\n]);\nconst TagTypeToFolderName = new Map([\n    [TagTypes.BLOCK, \"block\"],\n    [TagTypes.FLUID, \"fluid\"],\n    [TagTypes.ITEM, \"item\"],\n    [TagTypes.ENTITY_TYPE, \"entity_type\"],\n    [TagTypes.BIOME, \"worldgen/biome\"]\n]);\nconst FolderNameToTagType = new Map([\n    [\"block\", TagTypes.BLOCK],\n    [\"fluid\", TagTypes.FLUID],\n    [\"item\", TagTypes.ITEM],\n    [\"entity_type\", TagTypes.ENTITY_TYPE],\n    [\"worldgen/biome\", TagTypes.BIOME],\n]);\n\n\n//# sourceURL=webpack://stdmodulesystem.registries_generator/./scripts/datapack/commons.ts?");

/***/ }),

/***/ "./scripts/registries/RegistryConfigurationProvider.ts":
/*!*************************************************************!*\
  !*** ./scripts/registries/RegistryConfigurationProvider.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RegistryConfigurationProvider)\n/* harmony export */ });\n/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/config */ \"./scripts/config/config.ts\");\n/* harmony import */ var _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/FsUtils */ \"./scripts/utils/FsUtils.ts\");\n/* harmony import */ var _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/ConsoleManager */ \"./scripts/utils/ConsoleManager.ts\");\n/* harmony import */ var _propType__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./propType */ \"./scripts/registries/propType.ts\");\n/* harmony import */ var _commons__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commons */ \"./scripts/registries/commons.ts\");\n//\n// RegistryConfigurationProvider.ts\n//\n\n\n\n\n\nclass RegistryConfigurationProvider {\n    // Registry configurationuration file name\n    static CONFIG_FILE_NAME = \"registries.json\";\n    // Registry default element name\n    static DEFAULT_POOL_SELECTOR = \"default\";\n    static EMPTY_POOL_SELECTOR = \"empty\";\n    // Registry provider\n    registries;\n    // Registry configuration\n    configs;\n    constructor(registries) {\n        this.registries = registries;\n        this.configs = {\n            dataVersion: -1,\n            registries: new Map()\n        };\n    }\n    /**\n     * Load all registry configurations\n     */\n    load(dataPath) {\n        let filePath = dataPath + \"/\" + RegistryConfigurationProvider.CONFIG_FILE_NAME;\n        let registriesConfig = _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].readJSONFile(filePath);\n        this.configs.dataVersion = registriesConfig.data_version;\n        for (let element of registriesConfig.registries) {\n            let registryName = element.name;\n            // Build props\n            let props = new Map();\n            for (let prop of element.props) {\n                props.set(prop.name, {\n                    type: prop.type\n                });\n            }\n            let elementType = element.type;\n            let elementTagType = _commons__WEBPACK_IMPORTED_MODULE_4__.ElementTypeTags.get(elementType);\n            if (!elementTagType)\n                new Error(\"Unknow registry element type \\\"\" + elementTagType + \"\\\"\");\n            // Build element pool\n            let selector = element.pool || RegistryConfigurationProvider.DEFAULT_POOL_SELECTOR;\n            let elementPool = new Array();\n            if (selector === RegistryConfigurationProvider.DEFAULT_POOL_SELECTOR) {\n                this.registries.getReports().getRegistries().forEachRegistryElement(elementType, (elementName) => {\n                    elementPool.push(elementName);\n                });\n            }\n            else if (selector === RegistryConfigurationProvider.EMPTY_POOL_SELECTOR) {\n                // Empty pool\n            }\n            else if (selector.startsWith(\"#\")) {\n                elementPool.push(...this.registries.getDatapack().getUnpackedTagElements(elementTagType, selector.slice(1)));\n            }\n            else\n                throw new Error(\"Invalid element pool selector in registry \\\"\" + registryName + \"\\\"\");\n            // Create configuration\n            this.configs.registries.set(registryName, {\n                props: props,\n                elementType: elementType,\n                elementTagType: elementTagType,\n                elementPool: elementPool\n            });\n        }\n        if (_config_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG)\n            _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].log(filePath, _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_2__.ConsoleColors.GREEN);\n    }\n    /**\n     * Get data version\n     */\n    getDataVersion() {\n        return this.configs.dataVersion;\n    }\n    /**\n     * Iterate over all registry configurations\n     */\n    forEach(callback) {\n        let configs = this.configs.registries;\n        configs.forEach((config, registryName) => {\n            callback(registryName);\n        });\n    }\n    /**\n     * Iterate over all registry elements\n     */\n    forEachElement(registryName, callback) {\n        let elements = this.getElementPool(registryName);\n        elements.forEach((elementName) => {\n            callback(elementName);\n        });\n    }\n    /**\n     * Iterate over all props of a registry configuration\n     */\n    forEachProp(registryName, callback) {\n        let props = this.getProps(registryName);\n        props.forEach((config, propName) => {\n            callback(propName);\n        });\n    }\n    /**\n     * Check if a property exists\n     */\n    hasProp(registryName, propName) {\n        let props = this.getProps(registryName);\n        return props.has(propName);\n    }\n    /**\n     * Get the size of a property\n     */\n    getPropType(registryName, propName) {\n        let prop = this.getProp(registryName, propName);\n        return prop.type;\n    }\n    /**\n     * Check it the property is an id type\n     */\n    isPropIdType(registryName, propName) {\n        let prop = this.getProp(registryName, propName);\n        return prop.type === \"id\";\n    }\n    /**\n     * Get the size of a property\n     */\n    getPropSize(registryName, propName) {\n        return _propType__WEBPACK_IMPORTED_MODULE_3__.PropTypeSizes.get(this.getPropType(registryName, propName));\n    }\n    /**\n     * Check if a property is signed\n     */\n    getPropSign(registryName, propName) {\n        return _propType__WEBPACK_IMPORTED_MODULE_3__.PropTypeSigns.get(this.getPropType(registryName, propName));\n    }\n    /**\n     * Denormalize a property value\n     */\n    static denormalizePropValue(propValue, propSize, propSign) {\n        if (propSign && propSize > 1) {\n            propValue = propValue + (2 ** (propSize - 1));\n        }\n        return propValue;\n    }\n    /**\n     * Get the element type of a registry configuration\n     */\n    getElementType(registryName) {\n        let config = this.getRegistry(registryName);\n        return config.elementType;\n    }\n    /**\n     * Get the element tag type of a registry configuration\n     */\n    getElementTagType(registryName) {\n        let config = this.getRegistry(registryName);\n        return config.elementTagType;\n    }\n    /**\n     * Get the element type of a registry configuration\n     */\n    getElementPool(registryName) {\n        let config = this.getRegistry(registryName);\n        return config.elementPool;\n    }\n    /**\n     * Check if an element exists in a registry\n     */\n    existsElement(registryName, elementName) {\n        let elements = this.getElementPool(registryName);\n        return elements.includes(elementName);\n    }\n    /**\n     * Get a registry configuration\n     */\n    getRegistry(registryName) {\n        if (this.exists(registryName)) {\n            return this.configs.registries.get(registryName);\n        }\n        else\n            throw new Error(\"Registry configurationuration for registry \\\"\" + registryName + \"\\\" is not a valid registry configurationuration\");\n    }\n    /**\n     * Check if a registry configuration exists\n     */\n    exists(registryName) {\n        return this.configs.registries.has(registryName);\n    }\n    /**\n     * Get the props configuration of a registry configuration\n     */\n    getProps(registryName) {\n        let config = this.getRegistry(registryName);\n        return config.props;\n    }\n    /**\n     * Get a prop configuration of a registry configuration\n     */\n    getProp(registryName, propName) {\n        let props = this.getProps(registryName);\n        if (props.has(propName)) {\n            return props.get(propName);\n        }\n        else\n            throw new Error(\"Unknow property \\\"\" + propName + \"\\\"\");\n    }\n}\n\n\n//# sourceURL=webpack://stdmodulesystem.registries_generator/./scripts/registries/RegistryConfigurationProvider.ts?");

/***/ }),

/***/ "./scripts/registries/RegistryProvider.ts":
/*!************************************************!*\
  !*** ./scripts/registries/RegistryProvider.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RegistryProvider)\n/* harmony export */ });\n/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/config */ \"./scripts/config/config.ts\");\n/* harmony import */ var _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/FsUtils */ \"./scripts/utils/FsUtils.ts\");\n/* harmony import */ var _utils_ObjectUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/ObjectUtils */ \"./scripts/utils/ObjectUtils.ts\");\n/* harmony import */ var _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/ConsoleManager */ \"./scripts/utils/ConsoleManager.ts\");\n/* harmony import */ var _RegistryConfigurationProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./RegistryConfigurationProvider */ \"./scripts/registries/RegistryConfigurationProvider.ts\");\n/* harmony import */ var _RegistrySelectorParser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./RegistrySelectorParser */ \"./scripts/registries/RegistrySelectorParser.ts\");\n/* harmony import */ var _RegistrySelectorElementParser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./RegistrySelectorElementParser */ \"./scripts/registries/RegistrySelectorElementParser.ts\");\n//\n// RegistryProvider.ts\n//\n\n\n\n\n\n\n\nclass RegistryProvider {\n    // Registry file extension\n    static REGISTRIES_FILE_EXT = \"json\";\n    // Registry default element name\n    static DEFAULT_SELECTOR = \"default\";\n    // Reports\n    reports;\n    // Datapack\n    datapack;\n    // Registry configuration provider\n    config;\n    // Registry list\n    registryList;\n    constructor(reports, datapack) {\n        this.reports = reports;\n        this.datapack = datapack;\n        this.config = new _RegistryConfigurationProvider__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this);\n        this.registryList = new Map();\n    }\n    /**\n     * Load registries\n     */\n    load(dataPath, configDataPath) {\n        // Load configuration\n        this.config.load(configDataPath);\n        // Load data\n        this.loadFromFolder(dataPath);\n    }\n    /**\n     * Get config\n     */\n    getConfig() {\n        return this.config;\n    }\n    /**\n     * Get datapack\n     */\n    getDatapack() {\n        return this.datapack;\n    }\n    /**\n     * Get reports\n     */\n    getReports() {\n        return this.reports;\n    }\n    /**\n     * Iterate over all registries\n     */\n    forEach(callback) {\n        let registries = this.registryList;\n        registries.forEach((registry, registryName) => {\n            callback(registryName);\n        });\n    }\n    /**\n     * Iterate over all elements of a registry\n     */\n    forEachElement(registryName, callback) {\n        let elements = this.getElements(registryName);\n        elements.forEach((element, elementName) => {\n            callback(elementName);\n        });\n    }\n    /**\n     * Get an element from a registry\n     */\n    getElement(registryName, elementName) {\n        if (this.existsElement(registryName, elementName)) {\n            let elements = this.getElements(registryName);\n            return elements.get(elementName);\n        }\n        else\n            throw new Error(\"Element \\\"\" + elementName + \"\\\" was not found in registry \\\"\" + registryName + \"\\\"\");\n    }\n    /**\n     * Check if a registry contains an element\n     */\n    existsElement(registryName, elementName) {\n        let elements = this.getElements(registryName);\n        return elements.has(elementName);\n    }\n    /**\n     * Load registries from a folder\n     */\n    loadFromFolder(folderPath) {\n        let registriesFolders = _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getFolderElements(folderPath);\n        // Load registries from each subfolder\n        this.config.forEach((registryName) => {\n            let entries = new Map();\n            for (let registryNamespace of registriesFolders) {\n                let filePath = folderPath + \"/\" + registryNamespace + \"/\" + registryName + \".\" + RegistryProvider.REGISTRIES_FILE_EXT;\n                let registryData = _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].readJSONFile(filePath);\n                let defaultElement = registryData.entries[RegistryProvider.DEFAULT_SELECTOR] || {};\n                // Parse each selector and selector element\n                for (let selector in registryData.entries) {\n                    if (selector === RegistryProvider.DEFAULT_SELECTOR)\n                        continue;\n                    let element = registryData.entries[selector];\n                    let elementNames = new _RegistrySelectorParser__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this, registryName, registryNamespace).parse(selector);\n                    for (let elementName of elementNames) {\n                        let baseElement = entries.has(elementName) ? entries.get(elementName) : defaultElement;\n                        let unparsedElement = _utils_ObjectUtils__WEBPACK_IMPORTED_MODULE_2__[\"default\"].merge(baseElement, element);\n                        let finalElement = new _RegistrySelectorElementParser__WEBPACK_IMPORTED_MODULE_6__[\"default\"](this, registryName).parse(unparsedElement, elementName, selector);\n                        entries.set(elementName, finalElement);\n                    }\n                }\n                // Add other reports elements\n                this.config.forEachElement(registryName, (elementName) => {\n                    if ((!elementName.startsWith(registryNamespace) && elementName != \"unknow\") || entries.has(elementName))\n                        return;\n                    let finalElement = new _RegistrySelectorElementParser__WEBPACK_IMPORTED_MODULE_6__[\"default\"](this, registryName).parse(defaultElement, elementName);\n                    entries.set(elementName, finalElement);\n                });\n                if (_config_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG)\n                    _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_3__[\"default\"].log(filePath, _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_3__.ConsoleColors.GREEN);\n            }\n            // Add registry to the list\n            this.registryList.set(registryName, {\n                entries: entries\n            });\n        });\n    }\n    /**\n     * Get a registry\n     */\n    get(registryName) {\n        if (this.exists(registryName)) {\n            return this.registryList.get(registryName);\n        }\n        else\n            throw new Error(\"Registry \" + registryName + \" is not a valid registry\");\n    }\n    /**\n     * Check if a registry exists\n     */\n    exists(registryName) {\n        return this.registryList.has(registryName);\n    }\n    /**\n     * Get all elements from a registry\n     */\n    getElements(registryName) {\n        let registry = this.get(registryName);\n        return registry.entries;\n    }\n}\n\n\n//# sourceURL=webpack://stdmodulesystem.registries_generator/./scripts/registries/RegistryProvider.ts?");

/***/ }),

/***/ "./scripts/registries/RegistrySelectorElementParser.ts":
/*!*************************************************************!*\
  !*** ./scripts/registries/RegistrySelectorElementParser.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RegistrySelectorElementParser)\n/* harmony export */ });\n/* harmony import */ var _utils_MathUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/MathUtils */ \"./scripts/utils/MathUtils.ts\");\n//\n// RegistrySelectorElementParser.ts\n//\n\nclass RegistrySelectorElementParser {\n    // Registry provider\n    registries;\n    // Registry name\n    registryName;\n    constructor(registries, registryName) {\n        this.registries = registries;\n        this.registryName = registryName;\n    }\n    /**\n     * Parse\n     */\n    parse(element, elementName, selector) {\n        // Parsed element\n        let parsedElement = {};\n        // Check for invalid properties\n        let invalidProps = this.findInvalidProps(element);\n        if (invalidProps.length > 0)\n            throw new Error(\"Unknow property called \\\"\" + invalidProps[0] + \"\\\" found in the entry of the registry \\\"\" + this.registryName + \"\\\"\" + (selector ? \" at element selector \\\"\" + selector + \"\\\"\" : \"\"));\n        // Parse valid properties\n        this.getConfig().forEachProp(this.registryName, (propName) => {\n            if (element.hasOwnProperty(propName)) {\n                // Property was found\n                let propValue = element[propName];\n                if (!this.isValidPropValue(propName, propValue))\n                    throw new Error(\"Wrong value for property \\\"\" + propName + \"\\\" found in registry \\\"\" + this.registryName + \"\\\" at element selector \\\"\" + selector + \"\\\"\");\n                parsedElement[propName] = propValue;\n            }\n            else if (this.getConfig().isPropIdType(this.registryName, propName)) {\n                // Property is an id\n                let elementId = this.getReports().getRegistries().getRegistryElementId(this.getConfig().getElementType(this.registryName), elementName);\n                if (!this.isValidPropValue(propName, elementId))\n                    throw new Error(\"Too many elements in registry \\\"\" + this.registryName + \"\\\"\");\n                parsedElement[propName] = elementId;\n            }\n            else if (selector != undefined) {\n                // Property was not found\n                throw new Error(\"Property \\\"\" + propName + \"\\\" was not found in the entry of the registry \\\"\" + this.registryName + \"\\\"\" + (selector ? \" at element selector \\\"\" + selector + \"\\\"\" : \"\"));\n            }\n            else {\n                throw new Error(\"Default selector of registry \\\"\" + this.registryName + \"\\\" was missing property \\\"\" + propName + \"\\\" when using for generate others not specified elements from the registry pool\");\n            }\n        });\n        return parsedElement;\n    }\n    /**\n     * Get configuration\n     */\n    getConfig() {\n        return this.registries.getConfig();\n    }\n    /**\n     * Get reports\n     */\n    getReports() {\n        return this.registries.getReports();\n    }\n    /**\n     * Find invalid properties\n     */\n    findInvalidProps(element) {\n        let props = new Array();\n        for (let propName in element) {\n            if (!this.getConfig().hasProp(this.registryName, propName))\n                props.push(propName);\n        }\n        return props;\n    }\n    /**\n     * Check for valid property value\n     */\n    isValidPropValue(propName, propValue) {\n        let propType = this.getConfig().getPropType(this.registryName, propName);\n        let propSize = this.getConfig().getPropSize(this.registryName, propName);\n        let propSign = this.getConfig().getPropSign(this.registryName, propName);\n        if (propType == \"real\") {\n            return true;\n        }\n        else {\n            return _utils_MathUtils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isInteger(propValue) && _utils_MathUtils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isInRange(propValue, propSize, propSign);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://stdmodulesystem.registries_generator/./scripts/registries/RegistrySelectorElementParser.ts?");

/***/ }),

/***/ "./scripts/registries/RegistrySelectorParser.ts":
/*!******************************************************!*\
  !*** ./scripts/registries/RegistrySelectorParser.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RegistrySelectorParser)\n/* harmony export */ });\n//\n// RegistrySelectorParser.ts\n//\nclass RegistrySelectorParser {\n    // Registry provider\n    registries;\n    // Registry name\n    registryName;\n    // Registry default namespace\n    registryNamespace;\n    constructor(registries, registryName, registryNamespace) {\n        this.registries = registries;\n        this.registryName = registryName;\n        this.registryNamespace = registryNamespace;\n    }\n    /**\n     * Parse a selector\n     */\n    parse(selector) {\n        let elementNames = new Array();\n        // Parse each component\n        let selectorComponents = selector.includes(\",\") ? selector.split(\",\") : new Array(selector);\n        selectorComponents.forEach((selectorComponent) => {\n            elementNames.push(...this.parseComponent(selectorComponent));\n        });\n        // Check for valid element names\n        elementNames.forEach((elementName) => {\n            if (!this.registries.getConfig().existsElement(this.registryName, elementName))\n                throw new Error(\"Unknow element \\\"\" + elementName + \"\\\" found in registry \\\"\" + this.registryName + \"\\\" at element selector \\\"\" + selector + \"\\\"\");\n        });\n        return elementNames;\n    }\n    /**\n     * Parse a single selector component\n     */\n    parseComponent(selectorComponent) {\n        let tagType = this.registries.getConfig().getElementTagType(this.registryName);\n        let elementNames = new Array();\n        selectorComponent = selectorComponent.trim();\n        if (selectorComponent.startsWith(\"#\")) {\n            let tagElementNames = this.registries.getDatapack().getUnpackedTagElements(tagType, selectorComponent.slice(1));\n            for (let elementName of tagElementNames) {\n                elementNames.push(elementName);\n            }\n        }\n        else if (selectorComponent.includes(\":\")) {\n            elementNames.push(selectorComponent);\n        }\n        else {\n            selectorComponent = this.registryNamespace + \":\" + selectorComponent;\n            elementNames.push(selectorComponent);\n        }\n        return elementNames;\n    }\n}\n\n\n//# sourceURL=webpack://stdmodulesystem.registries_generator/./scripts/registries/RegistrySelectorParser.ts?");

/***/ }),

/***/ "./scripts/registries/commons.ts":
/*!***************************************!*\
  !*** ./scripts/registries/commons.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ElementTypeTags: () => (/* binding */ ElementTypeTags)\n/* harmony export */ });\n/* harmony import */ var _datapack_commons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../datapack/commons */ \"./scripts/datapack/commons.ts\");\n//\n// commons.ts\n//\n\nconst ElementTypeTags = new Map([\n    [\"minecraft:block\", _datapack_commons__WEBPACK_IMPORTED_MODULE_0__.TagTypes.BLOCK],\n    [\"minecraft:fluid\", _datapack_commons__WEBPACK_IMPORTED_MODULE_0__.TagTypes.FLUID],\n    [\"minecraft:item\", _datapack_commons__WEBPACK_IMPORTED_MODULE_0__.TagTypes.ITEM],\n    [\"minecraft:entity_type\", _datapack_commons__WEBPACK_IMPORTED_MODULE_0__.TagTypes.ENTITY_TYPE],\n    [\"minecraft:biome\", _datapack_commons__WEBPACK_IMPORTED_MODULE_0__.TagTypes.BIOME]\n]);\n\n\n//# sourceURL=webpack://stdmodulesystem.registries_generator/./scripts/registries/commons.ts?");

/***/ }),

/***/ "./scripts/registries/propType.ts":
/*!****************************************!*\
  !*** ./scripts/registries/propType.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PropTypeSigns: () => (/* binding */ PropTypeSigns),\n/* harmony export */   PropTypeSizes: () => (/* binding */ PropTypeSizes)\n/* harmony export */ });\n//\n// propType.ts\n//\nconst PropTypeSizes = new Map([\n    [\"bool\", 1],\n    [\"uint6\", 6],\n    [\"uchar\", 8],\n    [\"char\", 8],\n    [\"uint16\", 16],\n    [\"int16\", 16],\n    [\"uint32\", 32],\n    [\"int32\", 32],\n    [\"real\", 64],\n    [\"id\", 16]\n]);\nconst PropTypeSigns = new Map([\n    [\"bool\", false],\n    [\"uint6\", false],\n    [\"uchar\", false],\n    [\"char\", true],\n    [\"uint16\", false],\n    [\"int16\", true],\n    [\"uint32\", false],\n    [\"int32\", true],\n    [\"real\", true],\n    [\"id\", false]\n]);\n\n\n//# sourceURL=webpack://stdmodulesystem.registries_generator/./scripts/registries/propType.ts?");

/***/ }),

/***/ "./scripts/reports/BlockstatesProvider.ts":
/*!************************************************!*\
  !*** ./scripts/reports/BlockstatesProvider.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BlockstatesProvider)\n/* harmony export */ });\n/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/config */ \"./scripts/config/config.ts\");\n/* harmony import */ var _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/FsUtils */ \"./scripts/utils/FsUtils.ts\");\n/* harmony import */ var _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/ConsoleManager */ \"./scripts/utils/ConsoleManager.ts\");\n//\n// BlockstatesProvider.ts\n//\n\n\n\nclass BlockstatesProvider {\n    // Blockstate definitiones file name\n    static BLOCKSTATES_FILE_NAME = \"blocks.json\";\n    // Blockstate block properties list\n    blockPropertiesList;\n    // Blockstate property value list\n    propertyValuesList;\n    constructor() {\n        this.propertyValuesList = new Map();\n        this.blockPropertiesList = new Map();\n    }\n    /**\n     * Load data\n     */\n    load(dataPath) {\n        let blockstatesFilePath = dataPath + \"/reports/\" + BlockstatesProvider.BLOCKSTATES_FILE_NAME;\n        this.loadFromFile(blockstatesFilePath);\n        _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].log(this.propertyValuesList);\n    }\n    /**\n     * Iterate over all properties\n     */\n    forEachProperty(callback) {\n        this.propertyValuesList.forEach((values, propertyName) => {\n            callback(propertyName);\n        });\n    }\n    /**\n     * Iterate over all block properties\n     */\n    forEachBlockProperty(callback) {\n        this.blockPropertiesList.forEach((propertyList, value) => {\n            callback(value, propertyList);\n        });\n    }\n    /**\n     * Return a list of elements with a blockstate property\n     */\n    getPropertyValues(propertyName) {\n        let elements = new Array();\n        if (this.propertyValuesList.has(propertyName)) {\n            elements.push(...this.propertyValuesList.get(propertyName));\n        }\n        return elements;\n    }\n    /**\n     * Load data from a file\n     */\n    loadFromFile(filePath) {\n        let reports = _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].readJSONFile(filePath);\n        for (let elementName in reports) {\n            let properties = reports[elementName].properties;\n            let propertyList = new Array();\n            for (let propertyName in properties) {\n                propertyList.push(propertyName);\n                let valueList = new Array();\n                if (this.propertyValuesList.has(propertyName)) {\n                    valueList = this.propertyValuesList.get(propertyName);\n                }\n                let newValueList = properties[propertyName];\n                for (let valueName of newValueList) {\n                    if (!valueList.includes(valueName)) {\n                        valueList.push(valueName);\n                    }\n                }\n                this.propertyValuesList.set(propertyName, valueList);\n            }\n            this.blockPropertiesList.set(elementName, propertyList);\n        }\n        if (_config_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG)\n            _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].log(filePath, _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_2__.ConsoleColors.GREEN);\n    }\n}\n\n\n//# sourceURL=webpack://stdmodulesystem.registries_generator/./scripts/reports/BlockstatesProvider.ts?");

/***/ }),

/***/ "./scripts/reports/RegistryProvider.ts":
/*!*********************************************!*\
  !*** ./scripts/reports/RegistryProvider.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RegistryProvider)\n/* harmony export */ });\n/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/config */ \"./scripts/config/config.ts\");\n/* harmony import */ var _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/FsUtils */ \"./scripts/utils/FsUtils.ts\");\n/* harmony import */ var _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/ConsoleManager */ \"./scripts/utils/ConsoleManager.ts\");\n//\n// RegistryProvider.ts\n//\n\n\n\nclass RegistryProvider {\n    // Registries file name\n    static REGISTRIES_FILE_NAME = \"registries.json\";\n    // Default registry namespace\n    static DEFAULT_NAMESPACE = \"minecraft\";\n    // Registry list\n    registryList;\n    constructor() {\n        this.registryList = new Map();\n    }\n    /**\n     * Load data\n     */\n    load(dataPath) {\n        // Load data from file\n        let filePath = dataPath + \"/reports/\" + RegistryProvider.REGISTRIES_FILE_NAME;\n        this.loadOrUpdateFromFile(filePath);\n        // Load data from folders\n        let worldgenFolderPath = dataPath + \"/\" + \"data\";\n        let namespaceNames = _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getFolderElements(worldgenFolderPath);\n        for (let namespaceName of namespaceNames) {\n            let biomeFolderPath = worldgenFolderPath + \"/\" + namespaceName + \"/worldgen/biome\";\n            this.loadOrUpdateFromFolder(biomeFolderPath, namespaceName, RegistryProvider.DEFAULT_NAMESPACE + \":\" + \"biome\");\n        }\n    }\n    /**\n     * Iterate over all elements of a registry\n     */\n    forEachRegistryElement(registryName, callback) {\n        let elements = this.getRegistryElements(registryName);\n        elements.forEach((element, elementName) => {\n            callback(elementName);\n        });\n    }\n    /**\n     * Get the element id of a registry element\n     */\n    getRegistryElementId(registryName, elementName) {\n        let element = this.getRegistryElement(registryName, elementName);\n        return element.id;\n    }\n    /**\n     * Check if an element exists inside a registry\n     */\n    existsRegistryElement(registryName, elementName) {\n        let elements = this.getRegistryElements(registryName);\n        return elements.has(elementName);\n    }\n    /**\n     * Get all elements from a registry\n     */\n    getRegistryElements(registryName) {\n        if (this.registryList.has(registryName)) {\n            return this.registryList.get(registryName).entries;\n        }\n        else\n            throw new Error(\"Unknow Minecraft registry \\\"\" + registryName + \"\\\"\");\n    }\n    /**\n     * Get a registry element\n     */\n    getRegistryElement(registryName, elementName) {\n        let elements = this.getRegistryElements(registryName);\n        if (this.existsRegistryElement(registryName, elementName)) {\n            return elements.get(elementName);\n        }\n        else\n            throw new Error(\"Unknow Minecraft registry element \\\"\" + elementName + \"\\\"\");\n    }\n    /**\n     * Create a registry if not exists\n     */\n    createRegistryIfNotExists(registryName) {\n        if (!this.registryList.has(registryName)) {\n            this.registryList.set(registryName, {\n                entries: new Map()\n            });\n        }\n    }\n    /**\n     * Load a group of registries from a file\n     */\n    loadOrUpdateFromFile(filePath) {\n        let reports = _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].readJSONFile(filePath);\n        for (let registryName in reports) {\n            this.createRegistryIfNotExists(registryName);\n            let reportEntries = reports[registryName].entries;\n            // Unknow element\n            this.registryList.get(registryName).entries.set(\"unknow\", {\n                id: 0\n            });\n            for (let elementName in reportEntries) {\n                let id = reportEntries[elementName].protocol_id + 1;\n                this.registryList.get(registryName).entries.set(elementName, {\n                    id: id\n                });\n            }\n        }\n        if (_config_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG)\n            _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].log(filePath, _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_2__.ConsoleColors.GREEN);\n    }\n    /**\n     * Load or update a registry from a folder\n     */\n    loadOrUpdateFromFolder(folderPath, namespaceName, registryName) {\n        this.createRegistryIfNotExists(registryName);\n        // Unknow element\n        this.registryList.get(registryName).entries.set(\"unknow\", {\n            id: 0\n        });\n        let files = _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getFolderElements(folderPath);\n        for (let index in files) {\n            let name = namespaceName + \":\" + _utils_FsUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].removeExtension(files[index]);\n            this.registryList.get(registryName).entries.set(name, {\n                id: parseInt(index) + 1\n            });\n        }\n        if (_config_config__WEBPACK_IMPORTED_MODULE_0__.DEBUG)\n            _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].log(folderPath, _utils_ConsoleManager__WEBPACK_IMPORTED_MODULE_2__.ConsoleColors.GREEN);\n    }\n}\n\n\n//# sourceURL=webpack://stdmodulesystem.registries_generator/./scripts/reports/RegistryProvider.ts?");

/***/ }),

/***/ "./scripts/reports/ReportsProvider.ts":
/*!********************************************!*\
  !*** ./scripts/reports/ReportsProvider.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ReportsProvider)\n/* harmony export */ });\n/* harmony import */ var _RegistryProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RegistryProvider */ \"./scripts/reports/RegistryProvider.ts\");\n/* harmony import */ var _BlockstatesProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BlockstatesProvider */ \"./scripts/reports/BlockstatesProvider.ts\");\n//\n// ReportsProvider.ts\n//\n\n\nclass ReportsProvider {\n    // Registries\n    registries;\n    // Blockstates\n    blockstates;\n    constructor() {\n        this.registries = new _RegistryProvider__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n        this.blockstates = new _BlockstatesProvider__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n    }\n    /**\n     * Load data\n     */\n    load(dataPath) {\n        this.registries.load(dataPath);\n        this.blockstates.load(dataPath);\n    }\n    /**\n     * Get the registries provider\n     */\n    getRegistries() {\n        return this.registries;\n    }\n    /**\n     * Get blockstates provider\n     */\n    getBlockstates() {\n        return this.blockstates;\n    }\n}\n\n\n//# sourceURL=webpack://stdmodulesystem.registries_generator/./scripts/reports/ReportsProvider.ts?");

/***/ }),

/***/ "./scripts/utils/ConsoleManager.ts":
/*!*****************************************!*\
  !*** ./scripts/utils/ConsoleManager.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConsoleColors: () => (/* binding */ ConsoleColors),\n/* harmony export */   \"default\": () => (/* binding */ ConsoleManager)\n/* harmony export */ });\n/* harmony import */ var console__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! console */ \"console\");\n/* harmony import */ var console__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(console__WEBPACK_IMPORTED_MODULE_0__);\n//\n// ConsoleManager.ts\n//\n\nvar ConsoleColors;\n(function (ConsoleColors) {\n    ConsoleColors[\"RESET\"] = \"\\u001B[0m\";\n    ConsoleColors[\"WHITE\"] = \"\\u001B[37m\";\n    ConsoleColors[\"RED\"] = \"\\u001B[31m\";\n    ConsoleColors[\"GREEN\"] = \"\\u001B[32m\";\n    ConsoleColors[\"YELLOW\"] = \"\\u001B[33m\";\n    ConsoleColors[\"CYAN\"] = \"\\u001B[36m\";\n})(ConsoleColors || (ConsoleColors = {}));\nclass ConsoleManager {\n    constructor() {\n    }\n    /**\n     * Log text on console\n     */\n    static log(data, color = ConsoleColors.WHITE) {\n        if (data instanceof Object && color === ConsoleColors.WHITE) {\n            console__WEBPACK_IMPORTED_MODULE_0__.log(data);\n        }\n        else {\n            console__WEBPACK_IMPORTED_MODULE_0__.log(color + \"%s\" + ConsoleColors.RESET, data);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://stdmodulesystem.registries_generator/./scripts/utils/ConsoleManager.ts?");

/***/ }),

/***/ "./scripts/utils/FsUtils.ts":
/*!**********************************!*\
  !*** ./scripts/utils/FsUtils.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FsUtils)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n//\n// FsUtils.ts\n//\n\n\nclass FsUtils {\n    constructor() {\n    }\n    /**\n     * Check if a path exists\n     * @param path a path\n     */\n    static pathExists(pathName) {\n        return fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(pathName);\n    }\n    /**\n     * Split a path name into an array of element\n     * @param pathName path name\n     */\n    static splitPath(pathName) {\n        let parsedPath = path__WEBPACK_IMPORTED_MODULE_1__.parse(path__WEBPACK_IMPORTED_MODULE_1__.normalize(pathName));\n        return [...parsedPath.dir.split(\"\\\\\"), parsedPath.base];\n    }\n    /**\n     * Join two path name into a single path name\n     * @param rootPathName root path name\n     * @param pathName child path name\n     */\n    static joinPath(rootPathName, pathName) {\n        return \"./\" + path__WEBPACK_IMPORTED_MODULE_1__.join(rootPathName, pathName).replaceAll(\"\\\\\", \"/\");\n    }\n    /**\n     * Remove the extension from a file name\n     * @param file a file name\n     */\n    static removeExtension(fileName) {\n        return fileName.replace(/\\.[^/.]+$/, \"\");\n    }\n    /**\n     * Check if a folder exists\n     * @param folderPath a folder path\n     */\n    static folderExists(folderPath) {\n        return FsUtils.pathExists(folderPath) && FsUtils.isFolder(folderPath);\n    }\n    /**\n     * Check if an element path is a folder\n     * @param elementPath an element path\n     */\n    static isFolder(elementPath) {\n        return fs__WEBPACK_IMPORTED_MODULE_0__.lstatSync(elementPath).isDirectory();\n    }\n    /**\n     * Check if an element path is a file\n     * @param elementPath an element path\n     */\n    static isFile(elementPath) {\n        return fs__WEBPACK_IMPORTED_MODULE_0__.lstatSync(elementPath).isFile();\n    }\n    /**\n     * Get a list of elements inside a folder\n     * @param folderPath the path of the folder\n     */\n    static getFolderElements(folderPath) {\n        return fs__WEBPACK_IMPORTED_MODULE_0__.readdirSync(folderPath);\n    }\n    /**\n     * Scan a folder\n     * @param folderPath a folder path\n     * @param callback a callback method\n     */\n    static scanFolder(folderPath, callback, recursive = true) {\n        let elements = FsUtils.getFolderElements(folderPath);\n        for (let element of elements) {\n            let elementPath = folderPath + \"/\" + element;\n            if (FsUtils.isFile(elementPath)) {\n                callback(elementPath);\n            }\n            else if (recursive && FsUtils.isFolder(elementPath)) {\n                this.scanFolder(elementPath, callback);\n            }\n        }\n    }\n    /**\n     * Read a text file\n     * @param filePath the path of the file to read\n     */\n    static readTextFile(filePath) {\n        return fs__WEBPACK_IMPORTED_MODULE_0__.readFileSync(filePath, {\n            encoding: \"utf8\"\n        });\n    }\n    /**\n     * Write a text file\n     * @param filePath the path of the file to write\n     * @param data the string to write\n     */\n    static writeTextFile(filePath, data) {\n        var dirPath = path__WEBPACK_IMPORTED_MODULE_1__.dirname(filePath);\n        if (!fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(dirPath)) {\n            fs__WEBPACK_IMPORTED_MODULE_0__.mkdirSync(dirPath, {\n                recursive: true\n            });\n        }\n        fs__WEBPACK_IMPORTED_MODULE_0__.writeFileSync(filePath, data, {\n            encoding: \"utf8\"\n        });\n    }\n    /**\n     * Read a JSON file\n     * @param filePath the path of the file to read\n     */\n    static readJSONFile(filePath) {\n        let textData = FsUtils.readTextFile(filePath);\n        return JSON.parse(textData);\n    }\n    /**\n     * Write a JSON file\n     * @param filePath the path of the file to write\n     * @param object the JSON object to write\n     */\n    static writeJSONFile(filePath, object) {\n        let textData = JSON.stringify(object);\n        FsUtils.writeTextFile(filePath, textData);\n    }\n}\n\n\n//# sourceURL=webpack://stdmodulesystem.registries_generator/./scripts/utils/FsUtils.ts?");

/***/ }),

/***/ "./scripts/utils/MathUtils.ts":
/*!************************************!*\
  !*** ./scripts/utils/MathUtils.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MathUtils)\n/* harmony export */ });\n//\n// MathUtils.ts\n//\nclass MathUtils {\n    constructor() {\n    }\n    /**\n     * Check if a value is a numeric value\n     */\n    static isNumericValue(value) {\n        return typeof value === \"boolean\" || typeof value === \"number\";\n    }\n    /**\n     * Parse a numeric value into a number\n     */\n    static parseNumeric(value) {\n        if (MathUtils.isNumericValue(value)) {\n            if (typeof value === \"boolean\") {\n                return value ? 1 : 0;\n            }\n            else if (typeof value === \"number\") {\n                return value;\n            }\n        }\n        throw new Error(\"\\\"\" + value + \"\\\" is an invalid numeric variable\");\n    }\n    /**\n     * Check if a numeric value is an integer\n     */\n    static isInteger(value) {\n        value = MathUtils.parseNumeric(value);\n        return Number.isInteger(value);\n    }\n    /**\n     * Check if a numeric value is a real\n     */\n    static isReal(value) {\n        return !Number.isInteger(value);\n    }\n    /**\n     * Get the value of the n-th bit of a numeric value\n     */\n    static getBit(value, bit) {\n        value = MathUtils.parseNumeric(value);\n        return (value >>> bit) % 2;\n    }\n    /**\n     * Check if a numeric value is inside a range represented by an n number of bits\n     */\n    static isInRange(value, bits, sign = false) {\n        value = MathUtils.parseNumeric(value);\n        let powdiv = 2 ** (bits - 1);\n        let lowerLimit = sign ? -powdiv : 0;\n        let upperLimit = sign ? powdiv - 1 : 2 ** bits - 1;\n        return value >= lowerLimit && value <= upperLimit;\n    }\n}\n\n\n//# sourceURL=webpack://stdmodulesystem.registries_generator/./scripts/utils/MathUtils.ts?");

/***/ }),

/***/ "./scripts/utils/ObjectUtils.ts":
/*!**************************************!*\
  !*** ./scripts/utils/ObjectUtils.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ObjectUtils)\n/* harmony export */ });\n//\n// ObjectUtils.ts\n//\nclass ObjectUtils {\n    constructor() {\n    }\n    /**\n     * Merge two objects\n     */\n    static merge(object0, object1) {\n        return Object.assign(Object.assign({}, object0), object1);\n    }\n}\n\n\n//# sourceURL=webpack://stdmodulesystem.registries_generator/./scripts/utils/ObjectUtils.ts?");

/***/ }),

/***/ "console":
/*!**************************!*\
  !*** external "console" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("console");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./scripts/Main.ts");
/******/ 	
/******/ })()
;